package change;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;

import gnu.trove.list.array.TIntArrayList;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;


public class Changelog 
{
	private final List<Event> eventList;
	
	private final TObjectIntMap<EObject> eObjectToIDMap = new TObjectIntHashMap<EObject>();

	private final String classname = this.getClass().getSimpleName();
	
	private static int current_id = 0; 
	
	public Changelog()
	{
		eventList = new ArrayList<Event>();
	}
	
	public boolean addObjectToMap(EObject obj)
	{
		if(!eObjectToIDMap.containsKey(obj))
		{
			eObjectToIDMap.put(obj, current_id);
			
			current_id = current_id +1;
			return true;
		}
		return false;
	}
	
	public boolean addObjectToMap(EObject obj, int id)
	{
		if(!eObjectToIDMap.containsKey(obj))
		{
			eObjectToIDMap.put(obj, id);
			
			if(id >= current_id)
			{
				current_id = id + 1;
			}
			return true;
		}
		return false;
	}
	
	public void deleteEObjectFromMap(EObject obj)
	{
		eObjectToIDMap.remove(obj);
		
		if(eObjectToIDMap.containsKey(obj)) //tbr
		{
			System.out.println(classname+ " nope!!");
			System.exit(0);
		}
	}
	
	public int getObjectId(EObject obj)
	{
		if(!eObjectToIDMap.containsKey(obj)) //tbr
		{
			System.out.println(classname+" search returned false");
			System.exit(0);
		}
		return eObjectToIDMap.get(obj);
	}

	public void addEvent(Event e)
	{
		eventList.add(e);
	}
	
	public void removeEvent(Event e)
	{
		eventList.remove(e);
	}
	
	public void clearEvents()
	{
		eventList.clear();
	}
	
	public List<Event> getEventsList()
	{
		return eventList;
	}
	
	public void removeRedundantEvents()
	{   
		if(eventList.isEmpty())
			return;
		
		TObjectIntMap<EObject> eObjectEventMap = new TObjectIntHashMap<EObject>();
		
		//Map<EObject,Event> eObjectEventMap = new HashMap<EObject,Event>();
		
		/*Make sure each object is mapped to its most recent event*/
		for(int i = 0; i < eventList.size(); i++)
		{
			for(EObject obj : eventList.get(i).getEObjectList())
			{
				eObjectEventMap.put(obj, i);
			}
		}
		
		List<EObject> removedEObjects = new ArrayList<EObject>();
		
		for(Iterator i = eventList.iterator();i.hasNext();)
		{
			Event e = i.next();
			if(e instanceof EAttributeEvent)
				continue;
			
			//For all EOBjects
			for(Iterator<EObject> it = e.getEObjectList().iterator(); it.hasNext();)
			{
				EObject obj = it.next();
				
				Event objMostRecentEvent = eventList.get(eObjectEventMap.get(obj)) ; //get the 'most recent' event for this object
				
				if(objMostRecentEvent instanceof AddEObjectsToResourceEvent || objMostRecentEvent instanceof AddEObjectsToEReferenceEvent)
				{
					if(e != objMostRecentEvent) //if this event is not the objects 'most recent event'
					{
						it.remove(); //remove obj from this event
					}
				}
				else if (objMostRecentEvent instanceof  RemoveEObjectsFromResourceEvent || objMostRecentEvent instanceof RemoveEObjectsFromEReferenceEvent)
				{
					if( e != objMostRecentEvent)
					{
						//remove obj from this event
						removedEObjects.add(obj); //note that we prevented this obj from being added.
						
						it.remove();
					}
					else
					{
						if(removedEObjects.contains(obj)) //no need to remove objects that we prevented from being added
						{
							it.remove();
						}
					}
				}
					
			}
		}
		
		
		
		
		System.out.println(eObjectEventMap.size());
	}
}
