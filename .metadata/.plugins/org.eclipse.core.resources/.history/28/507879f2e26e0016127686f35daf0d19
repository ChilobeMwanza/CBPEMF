package impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.impl.ResourceImpl;

import change.Changelog;
import drivers.EPackageElementsNamesMap;

public abstract class CBPResource extends ResourceImpl
{
	/*
	 * Only remove redundant changes made during the current session.
	 */
	String OPTION_OPTIMISE_SESSION = "OPTIMISE_SESSION";
	/*
	 * Remove redundant changes from the entire model.
	 */
	String OPTION_OPTIMISE_MODEL ="OPTIMISE_MODEL";

	protected final Changelog changelog = new Changelog();
	
	public CBPResource(URI uri)
	{
		super(uri);
	}
	
	public CBPResource()
	{
		
	}
	
	@Override
	public void save(Map<?, ?> options)
	{
		changelog.removeRedundantEvents();
		if(options != null && options.containsKey(OPTION_OPTIMISE_MODEL))
		{
			if((boolean)options.get(OPTION_OPTIMISE_MODEL) == true)
			{
				System.out.println(classname+"yes");
				changelog.removeRedundantEvents();
			}
			
		}
		persistenceManager.save(options);
		
		/*If save file exists, print contents to console*/
		File f = new File(this.uri.path());
		
		if(f.exists() && !f.isDirectory())
		{
			System.out.println("DeltaResourceImpl: Print save file contents : ");
			
			try
			{
				BufferedReader in = new BufferedReader(new InputStreamReader(
						new FileInputStream(this.uri.path()),"Ascii"));
				String line;
				
				while((line = in.readLine())!= null)
				{
					System.out.println(line);
				}
				in.close();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	}
	
	public EPackageElementsNamesMap populateEPackageElementNamesMap(EPackage ePackage)
	{
		EPackageElementsNamesMap ePackageElementsNamesMap = new EPackageElementsNamesMap();
		
	    for(EClassifier eClassifier : ePackage.getEClassifiers())
	    {
	        if(eClassifier instanceof EClass)
	        {
	            EClass eClass = (EClass) eClassifier;
	            
	            ePackageElementsNamesMap.addName(eClass.getName());
	            
	            for(EStructuralFeature feature : eClass.getEAllStructuralFeatures())
	            {
	                ePackageElementsNamesMap.addName(feature.getName());
	            }
	        }
	    }
	    
	    return ePackageElementsNamesMap;
	}
	
}
