
//add tests for adding null values to list or direct e.t.c
package tests;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.junit.After;
import org.junit.Test;

import impl.DeltaResourceImpl;
import university.Book;
import university.Department;
import university.Library;
import university.StaffMember;
import university.StaffMemberType;
import university.Student;
import university.University;
import university.UniversityFactory;


public class SetUnsetAttributeTests extends TestBase
{
	private List<EObject> savedContentsList = null;
	private List<EObject> loadedContentsList = null;
	
	
	@After
	public void runAfterTestMethod()
	{
		savedContentsList = null;
		loadedContentsList = null;
	}
	/*
	 * Tests setting value of 1 single valued attribute
	 */
	@Test
	public void testSetOneSingleValuedAttribute() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni = UniversityFactory.eINSTANCE.createUniversity();
		res.getContents().add(uni);
		
		uni.setName("York Uni");
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	@Test
	public void testUnsetOneSingleValuedAttribute() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni = UniversityFactory.eINSTANCE.createUniversity();
		res.getContents().add(uni);
		
		uni.setName("York Uni");
		uni.setName(null);
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	@Test
	public void testSetEnum() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		StaffMember s = UniversityFactory.eINSTANCE.createStaffMember();
		res.getContents().add(s);
		
		s.setStaffMemberType(StaffMemberType.ACADEMIC);
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	@Test
	public void testSetMultipleSingleValueAttributes() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni = UniversityFactory.eINSTANCE.createUniversity();
		Department d = UniversityFactory.eINSTANCE.createDepartment();
		Student s = UniversityFactory.eINSTANCE.createStudent();
		
		res.getContents().add(uni);
		res.getContents().add(d);
		res.getContents().add(s);
		
		uni.setName("York Uni");
		d.setName("Computer Science");
		s.setStudentId(202042371);
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	@Test
	public void testUnsetMultipleSingleValueAttributes() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni = UniversityFactory.eINSTANCE.createUniversity();
		Department d = UniversityFactory.eINSTANCE.createDepartment();
		Student s = UniversityFactory.eINSTANCE.createStudent();
		Library lib = UniversityFactory.eINSTANCE.createLibrary();
		
		
		res.getContents().add(uni);
		res.getContents().add(d);
		res.getContents().add(s);
		res.getContents().add(lib);
		
		uni.setName("York Uni");
		d.setName("Computer Science");
		s.setStudentId(202042371);
		lib.setName("Main Library");
		
		res.save(null);
		
		lib.setName(null);
		s.setStudentId(0);
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	@Test
	public void testAddToManyValuedAttribute() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		Book b = UniversityFactory.eINSTANCE.createBook();
		
		res.getContents().add(b);
		
		b.getAuthorNames().add("J.K Rowling");
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	@Test
	public void testRemoveFromManyValuedAttribute() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		Book b = UniversityFactory.eINSTANCE.createBook();
		
		res.getContents().add(b);
		
		b.getAuthorNames().add("J.K Rowling");
		
		res.save(null);
		
		b.getAuthorNames().remove("J.K Rowling");
		
	}
	
}
