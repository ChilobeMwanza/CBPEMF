package generated_emf_tests;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.junit.*;

import impl.CBPBinaryResourceImpl;
import impl.CBPTextResourceImpl;
import university.UniversityPackage;

public abstract class TestBase 
{
	protected static String fileSaveLocation = null;
	protected final EPackage ePackage = UniversityPackage.eINSTANCE;
	private static boolean testingBinary = true;
	protected Resource res = null;
	private static String ext = null;
	
	@Before
	public void runOnceBeforeTest()
	{
		if(testingBinary)
		{
			fileSaveLocation ="university.cbpb";
			
			res = new CBPBinaryResourceImpl(URI.createURI
					(fileSaveLocation),UniversityPackage.eINSTANCE);
		}
		else
		{
			 fileSaveLocation ="university.cbpt";
			 
			 res = new CBPTextResourceImpl(URI.createURI
					 	(fileSaveLocation),UniversityPackage.eINSTANCE);
		}
		
		/*Delete save file if it exists*/
		File file = new File(fileSaveLocation);
		try {
			Files.deleteIfExists(file.toPath());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@BeforeClass()
	public static void runBeforeClass()
	{
		if(testingBinary)
			ext = "cbpb";
		else
			ext = "cbpt";
	}
	
	@After
	public void runOnceAfterTest()
	{
		res = null;
	}
	
	protected Resource loadResource()
	{
		//Load persisted model into resource contents
		ResourceSetImpl rs = new ResourceSetImpl();
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put
		(ext, new Resource.Factory()
		{
			@Override
			public Resource createResource(URI uri)
			{
				if(testingBinary)
					return new CBPBinaryResourceImpl(uri,ePackage);
				else
					return new CBPTextResourceImpl(uri,ePackage);
			}
		});
		
		rs.getPackageRegistry().put(ePackage.getNsURI(),ePackage);
		
		Resource res = rs.createResource(URI.createFileURI(fileSaveLocation));
		try {
			res.load(null);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return res;
	}
	
	protected List<EObject> getResourceContentsList(Resource res)
	{
		List<EObject> outputList = new ArrayList<EObject>();
		for(TreeIterator<EObject> it = res.getAllContents(); it.hasNext();)
		{	
			outputList.add(it.next());
		}
		return outputList;
	}
}
