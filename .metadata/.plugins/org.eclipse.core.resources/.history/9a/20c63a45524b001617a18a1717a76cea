/**
 * BUGS/ISSUES
 * 1) In order for this implementation to work, newly created model elements
 * must be added directly to the resource, or added to an object that who's hierachy
 * eventually leads to the resource. 
 */

package main;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcorePackage;
//import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.ecore.resource.Resource;


import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;

import change.EventAdapter;
import impl.DeltaResourceImpl;
import library.Book;
import library.Library;
import library.LibraryFactory;
import library.LibraryPackage;

public class App 
{
	private static String fileSaveLocation ="library.txt";
	
	public static void main(String[] args) throws Exception
	{
		// TODO Auto-generated method stub
		App app = new App();
	//	app.loadResource();
		app.createResource();
	}
	
	public void loadResource() throws IOException
	{
		ResourceSetImpl rs = new ResourceSetImpl();
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put
		("txt", new Resource.Factory()
		{
			@Override
			public Resource createResource(URI uri)
			{
				return new DeltaResourceImpl(uri,LibraryPackage.eINSTANCE);
			}
		});
		
		rs.getPackageRegistry().put(LibraryPackage.eINSTANCE.getNsURI(), 
				LibraryPackage.eINSTANCE);
		
		Resource resource = rs.createResource(URI.createFileURI(fileSaveLocation));
		resource.load(null);
		
		
		
		Library library = (Library) resource.getContents().get(0);
		
		
		//Map<String, String> loadOptions = new HashMap<String, String>();
		//loadOptions.put("FILE_LOCATION", fileSaveLocation);
		
	}
	
	
	public void createResource() throws Exception
	{
		//Resource resource = new XMIResourceImpl();
		
		//System.out.println(EPackage.Registry.INSTANCE.containsKey("http://io.emf.change_based_persistence.text"));
		Resource resource = new DeltaResourceImpl(URI.createURI("library.txt"),LibraryPackage.eINSTANCE);
		
		EPackage epackage = LibraryPackage.eINSTANCE; //1
		
		
	
		
		
		
		//System.out.println(epackage.getNsURI());

		
		//Create root object, add it to resource.
		Library lib1 = LibraryFactory.eINSTANCE.createLibrary();
		resource.getContents().add(lib1); // /
		
		
		
		Library lib2 = LibraryFactory.eINSTANCE.createLibrary();
		//resource.getContents().add(lib2); // 1
	
		
	    Book book1 = LibraryFactory.eINSTANCE.createBook();
	   
	    
	    resource.getContents().add(book1); //2
	    
	    book1.setName("First book!!!!");
	    
	    System.out.println(resource.getContents().size());
	    
	   
	    Book book2 = LibraryFactory.eINSTANCE.createBook();
	    //resource.getContents().add(book2);
	    
	    //book2.setName("Second book!!!!");
	   lib1.getBooks().add(book1);
	   
	    
	    Book book3 = LibraryFactory.eINSTANCE.createBook();
	  //  resource.getContents().add(book3);

	  //  lib1.getBooks().add(book3);
	    
	    
	  		//saveOptions.put("FILE_SAVE_LOCATION", fileSaveLocation);
	    
	
	//	resource.save(null);
		
		//Library lib2 = LibraryFactory.eINSTANCE.createLibrary();
	//	resource.getContents().add(lib2);
		
		
		//create book, make some (untracked) changes to book
	 //   Book book = LibraryFactory.eINSTANCE.createBook();
	  //  book.setIdNumber(666);
	  //  book.setName("Harry Potter and the MODE");
	    
	    //Add book to library
	  //  lib.getBooks().add(book);
	    
	 
	    //add library to contents
	    //resource.getContents().add(lib);
	    
	    //changes made to lib or book past this point are tracked...
		
		//resource.save(new FileOutputStream(new File("library.xmi")),null);

		//Map<String, String> saveOptions = new HashMap<String, String>();
		//saveOptions.put("FILE_SAVE_LOCATION", fileSaveLocation);
		
		//resource.save(null);
	    
	}

}
