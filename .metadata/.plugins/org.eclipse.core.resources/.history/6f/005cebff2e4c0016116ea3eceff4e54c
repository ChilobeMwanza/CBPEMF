package change;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import impl.DeltaResourceImpl;


public class ChangeLog 
{
	//public static final ChangeLog INSTANCE = new ChangeLog();
	
	public ChangeLog(DeltaResourceImpl res)
	{
		
	}
	private List<AbstractEntry> eventsList = new ArrayList<AbstractEntry>();

	public void addEvent(AbstractEntry entry)
	{
		eventsList.add(entry);
	}
	
	public List<AbstractEntry> getEventsList()
	{
		return eventsList;
	}
	
	public void sortChangeLog(List<AbstractEntry> list)
	{
		/*UUID currentUUID = null;//eventsList.get(1).getUUID(); //second entry of unsorted changelog is always a create
		List<AbstractEntry> outputList = new ArrayList<AbstractEntry>();
		
		Map<UUID,List<AbstractEntry>> map = new LinkedHashMap<UUID,List<AbstractEntry>>();
		
		List<AbstractEntry> setManyList = new ArrayList<AbstractEntry>();
		
		
		//Map<String, String> saveOptions = new HashMap<String, String>();
				//saveOptions.put("FILE_SAVE_LOCATION", fileSaveLocation);
		
		for(Iterator<AbstractEntry> it = list.iterator(); it.hasNext();)
		{
			AbstractEntry e = it.next();
			
			if(e instanceof NewObjectEntry) //find new object entry
			{
				//if(currentUUID == null)
				//	currentUUID = e.getUUID();
				//outputList.add(e);
				//it.remove(); 
				
				List<AbstractEntry> temp = new ArrayList<AbstractEntry>();
				temp.add(e);
				it.remove();
				map.put(e.getUUID(), temp);
			}
			else if (e instanceof SetAttributeEntry )
			{
			    List<AbstractEntry> temp = new ArrayList<AbstractEntry>();
				SetAttributeEntry s = (SetAttributeEntry)e;
				
				if(s.geteAttribute().isMany())
				{
					//setMany
				}
				else
				{
					map.get(e.getUUID()).add(e);
				}
			}
			
			//..deal with other event types in same way
			
			currentUUID = null;
			
		}*/
		
		/* Create List for each type of event*/
		List<AbstractEntry> newObjectEntryList = new ArrayList<AbstractEntry>();
		List<AbstractEntry> setAttrSingleList = new ArrayList<AbstractEntry>();
		List<AbstractEntry> setAttributeManyList = new ArrayList<AbstractEntry>();
		
		/* Sort List entries into aprropriate list*/
		
		for(AbstractEntry e: list)
		{
			if(e instanceof NewObjectEntry)
				newObjectEntryList.add(e);
			else if(e instanceof SetAttributeEntry)
			{
				SetAttributeEntry s = (SetAttributeEntry)e;
				if(s.geteAttribute().isMany())
					setAttrSingleList.add(e);
				else
					setAttributeManyList.add(e);
			}	
		}
		
		/*Create a global, sorted changelog*/
		List<AbstractEntry> sortedList = new ArrayList<AbstractEntry>();
		for(AbstractEntry e : newObjectEntryList)
		{
			if(e)
		}
		
		
	}
	
	public void showLogEntries(List<AbstractEntry> list)
	{
		for(AbstractEntry e : list)
		{
			if(e instanceof InitialEntry)
			{
				//System.out.println("InitialEntry:");
				System.out.println("NamespaceURI = "+e.getEObject().eClass().getEPackage().getNsURI());
				
			}
			if(e instanceof NewObjectEntry)
			{
				//System.out.println("NewObjectEntry:");
				System.out.println("CREATE "+e.getEObject().eClass().getName()+" "+e.getUUID().toString());
			}
			if(e instanceof SetAttributeEntry)
			{
				SetAttributeEntry s = (SetAttributeEntry)e;
				//System.out.println("Set Attribute Entry");
				System.out.println("SET " + e.getEObject().eClass().getName()+" "+e.getUUID()+" "+s.geteAttribute().getName());
			}
		}
	}
	
	public void showLogEntries()
	{
		showLogEntries(eventsList);
	}
}
