/*
 * TO DO:
 * Throw proper exceptions
 */
package drivers;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import change.Changelog;
import exceptions.UnknownPackageException;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;

public class TextDeserializer 
{
	private final String classname = this.getClass().getSimpleName();
	private EPackage ePackage = null;
	private final Changelog changelog;
	
	private final TIntObjectMap<EObject> IDToEObjectMap = new TIntObjectHashMap<EObject>();

	
	private PersistenceManager manager;
	private final EPackageElementsNamesMap ePackageElementsNamesMap;
	
	public TextDeserializer(PersistenceManager manager, Changelog aChangelog,
			EPackageElementsNamesMap ePackageElementsNamesMap)
	{
		this.manager = manager;
		this.changelog = aChangelog;
		this.ePackageElementsNamesMap = ePackageElementsNamesMap;
	}
	
	public void load(Map<?,?> options) throws Exception
	{	
		BufferedReader br = new BufferedReader(
				new InputStreamReader(new FileInputStream(manager.getURI().path()), PersistenceManager.TEXT_ENCODING));
		
		String line;
		
		br.readLine(); //skip file format info
		
		if((line = br.readLine()) != null)
		{
			String[] stringArray = line.split(" ");
			ePackage = loadMetamodel(stringArray[1]);
		}
		else
		{
			System.out.println(classname+" Error, file empty");
			System.exit(0);
		}
		
		while((line = br.readLine()) != null)
		{
			//System.out.println(line);
			StringTokenizer st = new StringTokenizer(line);
			
			int eventType = -1;
			
			if(st.hasMoreElements())
				eventType = Integer.valueOf(st.nextToken());
		
				
			/* Switches over various event types, calls appropriate handler method*/
			switch(eventType)
			{
			case PersistenceManager.CREATE_AND_ADD_TO_RESOURCE:
				handleCreateAndAddToResourceEvent(line);
				break;
			case PersistenceManager.CREATE_AND_SET_EREFERENCE_VALUE:
				handeCreateAndSetEReferenceValueEvent(line);
				break;
			case PersistenceManager.SET_EATTRIBUTE_VALUE:
				handleSetEAttributeEvent(line);
				break;
			case PersistenceManager.SET_EREFERENCE_VALUE:
				handleSetEReferenceEvent(line);
				break;
			case PersistenceManager.UNSET_EATTRIBUTE_VALUE: 
				handleUnsetEAttributeEvent(line);
				break;
			case PersistenceManager.UNSET_EREFERENCE_VALUE:
				handleUnsetEReferenceEvent(line);
				break;
			case PersistenceManager.ADD_TO_RESOURCE:
				handleAddToResourceEvent(line);
				break;
			case PersistenceManager.DELETE_FROM_RESOURCE:
				handleRemoveFromResourceEvent(line);
				break;
			default:
				break;
			}	
		}
		br.close();
		manager.setResume(true);
	}
	
	private void handeCreateAndSetEReferenceValueEvent(String line)
	{
		String[] stringArray = line.split(" ");
		
		 EObject focus_obj = IDToEObjectMap.get(Integer.valueOf(stringArray[2]));
		 
		 EReference ref = (EReference) focus_obj.eClass().getEStructuralFeature
	                (ePackageElementsNamesMap.getName(Integer.valueOf(stringArray[1])));
		 
		 String[] obj_str_array = tokeniseString(getValueInSquareBrackets(line));
		 
		 List <EObject> objects_to_add = new ArrayList<EObject>();
		 
		 for(String str : obj_str_array)
	     {
	        String [] temp = str.split(" ");
	        
	        EObject obj = createEObject(ePackageElementsNamesMap.getName
	                (Integer.valueOf(temp[0])));
	        
	        int id = Integer.valueOf(temp[1]); 
	        
	        changelog.addObjectToMap(obj, id);  
	        IDToEObjectMap.put(id, obj);
	     }
		 
		 if(ref.isMany())
			{
				@SuppressWarnings("unchecked")
				EList<EObject> feature_value_list = (EList<EObject>) focus_obj.eGet(ref);
				
				for(EObject obj : objects_to_add)
				{
					feature_value_list.add(obj);
				}
			}
			else
			{
				focus_obj.eSet(ref, objects_to_add.get(0));
			}
		 
		
		
	}
	private void handleCreateAndAddToResourceEvent(String line)
	{
		 String[] obj_str_array = tokeniseString(getValueInSquareBrackets(line));
		 
		 for(String str : obj_str_array)
	     {
	        String [] stringArray = str.split(" ");
	        
	        EObject obj = createEObject(ePackageElementsNamesMap.getName
	                (Integer.valueOf(stringArray[0])));
	        
	        int id = Integer.valueOf(stringArray[1]); 
	        
	        changelog.addObjectToMap(obj, id);  
	        IDToEObjectMap.put(id, obj);
	        
	        manager.addEObjectToContents(obj); //add to resource contents
	     }
		
	}
	private void handleSetEReferenceEvent(String line)
	{
		
		String[] stringArray = line.split(" ");
		EObject focus_obj = IDToEObjectMap.get(Integer.valueOf(stringArray[2]));
		
		EReference ref = (EReference) focus_obj.eClass().getEStructuralFeature
				(ePackageElementsNamesMap.getName(Integer.valueOf(stringArray[1])));
		
		String[] feature_values_array = tokeniseString(getValueInSquareBrackets(line));
		
		if(ref.isMany())
		{
			@SuppressWarnings("unchecked")
			EList<EObject> feature_value_list = (EList<EObject>) focus_obj.eGet(ref);
			
			for(String str : feature_values_array)
			{
				feature_value_list.add(IDToEObjectMap.get(Integer.valueOf(str)));
			}
		}
		else
		{
			focus_obj.eSet(ref, IDToEObjectMap.get(Integer.valueOf(feature_values_array [0])));
		}
	}
	
	private void handleUnsetEReferenceEvent(String line)
	{
		String[] stringArray = line.split(" ");
		
		EObject focus_obj = IDToEObjectMap.get(Integer.valueOf(stringArray[2]));
		
		EReference ref = (EReference) focus_obj.eClass().getEStructuralFeature
				(ePackageElementsNamesMap.getName(Integer.valueOf(stringArray[1])));
		
		if(ref.isMany())
		{
			String[] feature_values_array = tokeniseString(getValueInSquareBrackets(line));
			
			@SuppressWarnings("unchecked")
			EList<EObject> feature_value_list = (EList<EObject>) focus_obj.eGet(ref);
			
			for(String str : feature_values_array)
			{
				feature_value_list.remove(IDToEObjectMap.get(Integer.valueOf(str)));				
			}
		}
		else
		{
			focus_obj.eUnset(ref);
		}
	}
	
	private void handleSetEAttributeEvent(String line) 
	{
		
		String[] stringArray = line.split(" ");
		
		EObject focus_obj = IDToEObjectMap .get(Integer.valueOf(stringArray[2]));
		
		if(focus_obj == null)
		{
			System.out.println("NULL!");
		}
		
		EAttribute attr = (EAttribute)focus_obj.eClass().getEStructuralFeature
				(ePackageElementsNamesMap.getName(Integer.valueOf(stringArray[1])));
		
		String[] feature_values_array = tokeniseString(getValueInSquareBrackets(line));
		
		if(attr.isMany())
		{
			@SuppressWarnings("unchecked")
			EList<Object> feature_value_list = (EList<Object>) focus_obj.eGet(attr);  //change nam of var!
			
			for(String str : feature_values_array)
			{
				if(str.equals("null"))
					feature_value_list.add(null);
				else
					feature_value_list.add(EcoreUtil.createFromString(attr.getEAttributeType(),str));
			}
		}
		else
		{
			//System.out.println(classname+" "+feature_values_array [0]);
			if(feature_values_array [0].equals("null"))
				focus_obj.eSet(attr, null);
			else
				focus_obj.eSet(attr, EcoreUtil.createFromString(attr.getEAttributeType(),feature_values_array [0]));
		}
	}
	
	private void handleAddToResourceEvent(String line)
	{
		String[] obj_str_array = tokeniseString(getValueInSquareBrackets(line));
		
		for(String str : obj_str_array)
		{
			manager.addEObjectToContents(IDToEObjectMap.get(Integer.valueOf(str)));
		}
	}
	
	private void handleRemoveFromResourceEvent(String line)
	{
		String[] obj_str_array = tokeniseString(getValueInSquareBrackets(line));
		
		for(String str : obj_str_array)
		{
			manager.removeEObjectFromContents(IDToEObjectMap.get(Integer.valueOf(str)));
		}
	}
	
	private void handleCreateEvent(String line)
	{
		String[] obj_str_array = tokeniseString(getValueInSquareBrackets(line));
		
		for(String str : obj_str_array)
		{
			String [] stringArray = str.split(" ");
			
			EObject obj = createEObject(ePackageElementsNamesMap.getName
					(Integer.valueOf(stringArray[0])));
			
			int id = Integer.valueOf(stringArray[1]); 
			
			changelog.addObjectToMap(obj, id);	
			IDToEObjectMap.put(id, obj);
		}
	}
	
	private void handleUnsetEAttributeEvent(String line)
	{
		String[] stringArray = line.split(" ");
		
		int obj_id = Integer.valueOf(stringArray[2]);
		
		EObject obj = IDToEObjectMap.get(obj_id);
		
		EAttribute attr = (EAttribute) obj.eClass().getEStructuralFeature
				(ePackageElementsNamesMap.getName(Integer.valueOf(stringArray[1])));
		
		if(attr.isMany())
		{
			@SuppressWarnings("unchecked")
			EList<Object> attrValueList = (EList<Object>) obj.eGet(attr);  
			String[] obj_attr_str_array = tokeniseString(getValueInSquareBrackets(line));
			
			for(String str : obj_attr_str_array)
			{
				attrValueList.remove(EcoreUtil.createFromString(attr.getEAttributeType(),str));
			}
		}
		else
		{
			obj.eUnset(attr);
		}
	}
	
	private EPackage loadMetamodel(String metamodelURI) throws UnknownPackageException
	{
		EPackage ePackage = null;
		
		if(EPackage.Registry.INSTANCE.containsKey(metamodelURI))
			ePackage = EPackage.Registry.INSTANCE.getEPackage(metamodelURI);
		
		else
			throw new UnknownPackageException(metamodelURI);
		
		return ePackage;
	}
	
	private EObject createEObject(String eClassName) //does this need to be a method?
	{
		return ePackage.getEFactoryInstance().create((EClass)
				ePackage.getEClassifier(eClassName));
	}
	
	/*private String getNthWord(String input, int n)
	{
		String [] stringArray = input.split(" ");
		if(n-1 < stringArray.length)
			return stringArray[n-1];
		return null;
	}*/
	
	
	

	

	
	/*Tokenises a string seperated by a specified delimiter
	 *http://stackoverflow.com/questions/18677762/handling-delimiter-with-escape-
	  -in-java-string-split-method
	 * */
	private String[] tokeniseString(String input)
	{
		String regex = "(?<!" + Pattern.quote(PersistenceManager.ESCAPE_CHAR) + ")" + Pattern.quote(PersistenceManager.DELIMITER);

		String[] output = input.split(regex);
		
		for(int i = 0; i < output.length; i++)
		{
			output[i] = output[i].replace(PersistenceManager.ESCAPE_CHAR+PersistenceManager.DELIMITER, PersistenceManager.DELIMITER);
		}
		
		return output;
	}
	
	//returns everything inbetween []
	private String getValueInSquareBrackets(String str)
	{
		Pattern p = Pattern.compile("\\[(.*?)\\]");
		Matcher m = p.matcher(str);
		
		String result = "";
		
		if(m.find())
			result = m.group(1);
		return result;
	}
}
