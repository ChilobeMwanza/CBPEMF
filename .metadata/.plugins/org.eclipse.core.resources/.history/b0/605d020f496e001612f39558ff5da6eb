package change;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import org.eclipse.emf.ecore.EObject;

import gnu.trove.list.array.TIntArrayList;
import gnu.trove.map.TIntObjectMap;
import gnu.trove.map.TObjectIntMap;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.map.hash.TObjectIntHashMap;


public class Changelog 
{
	private final List<Event> eventList;
	
	private final TObjectIntMap<EObject> eObjectToIDMap = new TObjectIntHashMap<EObject>();

	private final String classname = this.getClass().getSimpleName();
	
	private static int current_id = 0; 
	
	public Changelog()
	{
		eventList = new ArrayList<Event>();
	}
	
	public boolean addObjectToMap(EObject obj)
	{
		if(!eObjectToIDMap.containsKey(obj))
		{
			eObjectToIDMap.put(obj, current_id);
			
			current_id = current_id +1;
			return true;
		}
		return false;
	}
	
	public boolean addObjectToMap(EObject obj, int id)
	{
		if(!eObjectToIDMap.containsKey(obj))
		{
			eObjectToIDMap.put(obj, id);
			
			if(id >= current_id)
			{
				current_id = id + 1;
			}
			return true;
		}
		return false;
	}
	
	public void deleteEObjectFromMap(EObject obj)
	{
		eObjectToIDMap.remove(obj);
		
		if(eObjectToIDMap.containsKey(obj)) //tbr
		{
			System.out.println(classname+ " nope!!");
			System.exit(0);
		}
	}
	
	public int getObjectId(EObject obj)
	{
		if(!eObjectToIDMap.containsKey(obj)) //tbr
		{
			System.out.println(classname+" search returned false");
			System.exit(0);
		}
		return eObjectToIDMap.get(obj);
	}

	public void addEvent(Event e)
	{
		eventList.add(e);
	}
	
	public void removeEvent(Event e)
	{
		eventList.remove(e);
	}
	
	public void clearEvents()
	{
		eventList.clear();
	}
	
	public List<Event> getEventsList()
	{
		return eventList;
	}
	
	public void removeRedundantEvents()
	{   
		if(eventList.isEmpty())
			return;
		
	//	System.out.println(classname+"event list size before optimise: "+eventList.size());
		int currentIndex = eventList.size();
		
		//ListIterator<Event> it = eventList.listIterator(currentIndex); 
		//Event currentEvent = (Event) it.previous();
		
		while(currentIndex != 1)
		{
			//System.out.println(classname+"current index: "+(currentIndex-1));
			ListIterator<Event> it = eventList.listIterator(currentIndex);
			Event currentEvent = (Event) it.previous();
	
			if(!(currentEvent instanceof EAttributeEvent))
			{
				while(it.hasPrevious())
				{
					//System.out.println(classname+"compare: "+(currentIndex-1)+" with :"+it.previousIndex());
					Event comparisonEvent = it.previous();
				
					if(comparisonEvent instanceof EAttributeEvent || comparisonEvent.getEObjectList().isEmpty())
						continue;
					
					
					
					if(currentEvent instanceof RemoveEObjectsFromResourceEvent || currentEvent instanceof RemoveEObjectsFromEReferenceEvent)
					{
						for(Iterator<EObject> iter1 = currentEvent.getEObjectList().iterator(); iter1.hasNext();)
						{
							EObject obj = (EObject) iter1.next();
							for(Iterator<EObject> iter2 = comparisonEvent.getEObjectList().iterator(); iter2.hasNext();)
							{
								EObject obj2 = iter2.next();
								
								if(obj == obj2)
								{
									System.out.println(classname+" removal!");
									iter1.remove();
									iter2.remove();
									break;
								}
							}
						}
					}
					else 
					{
						for(Iterator<EObject> iter1 = currentEvent.getEObjectList().iterator(); iter1.hasNext();)
						{
							EObject obj = (EObject) iter1.next();
							for(Iterator<EObject> iter2 = comparisonEvent.getEObjectList().iterator(); iter2.hasNext();)
							{
								EObject obj2 = iter2.next();
								
								if(obj == obj2)
								{
									iter2.remove();
									break;
								}
							}
						}
					}
					
					//System.out.println(classname+"size of object list before remove: "+comparisonEvent.getEObjectList().size());
					//comparisonEvent.getEObjectList().removeAll(currentEvent.getEObjectList());
					//System.out.println(classname+"size of object list after remove: "+comparisonEvent.getEObjectList().size());	
					
					
				}	
			}
			
			currentIndex --;
		
		}
		
		
		
		
		for(Iterator<Event> it = eventList.iterator(); it.hasNext();)
		{
			Event e = it.next();
			
			
			if(e instanceof EAttributeEvent)
			{
				if(e.getEAttributeValuesList().isEmpty())
				{
					//System.out.println(classname+"removed attribute event");
					it.remove();
				}				
			}
			else 
			{
				//System.out.println(classname+"after :: eventType: "+e.getEventType()+" eobject list size"+e.getEObjectList().size());
				if(e.getEObjectList().isEmpty())
				{
					System.out.println(classname+"removed event");
					it.remove();
				}
				
				
			}
		}
		//System.out.println(classname+"event list size after optimise: "+eventList.size());
		
		
	
		//System.out.println(classname+"shutdown");
		//System.exit(0);
		
	//	TObjectArrayList foo;
	
		//map of eattribute names
		//TIntObjectMap<List<Object>> attributeIDToValueMap = new TIntObjectHashMap<List<Object>>();
		
	//	TIntObjectMap<TIntObjectMap<List<Object>>> eObjectToEAttributeMap = new TIntObjectHashMap<TIntObjectMap<List<Object>>>();
		
		//TIntegerObjectArrayList;
		

	}
}
