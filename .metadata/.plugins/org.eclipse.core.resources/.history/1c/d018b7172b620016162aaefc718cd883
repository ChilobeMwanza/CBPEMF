/*
 * Explicitly tests the ADD_R entry (which adds items directly to the resource), 
 * create entry is implicitly tested.
 * 
 * Resource contents are cleared before each test run. Each test run is independent.
 * 
 * The save file is deleted before each test run. 
 * 
 * This class does not test resume functionality (i.e make model 1, persist model 1, load model 1, make additional changes 
 * to loaded model, persist it, e.t.c)
 */
package tests;
import static org.junit.Assert.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.junit.*;

import impl.DeltaResourceImpl;
import university.Department;
import university.Library;
import university.Student;
import university.University;
import university.UniversityFactory;
import university.Vehicle;

public class AddToResourceTests extends TestBase
{
	private List<EObject> savedContentsList = null;
	private List<EObject> loadedContentsList = null;
	
	
	 @After
	 public void runAfterTestMethod()
	 {
		 savedContentsList = null;
		 loadedContentsList = null;
	 }
	
	/*
	 * Test if a single object added to resource can be serialised 
	 */
	@Test
    public void testAddSingleToResource() throws Exception 
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni = UniversityFactory.eINSTANCE.createUniversity();
		res.getContents().add(uni);
		
		res.save(null);
	
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
    }
	
	/*
	 * Test if multiple single objects added to resource can be serialised
	 */
	@Test
	public void testAddSingleRepeatedToResource() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni1 = UniversityFactory.eINSTANCE.createUniversity();
		University uni2 = UniversityFactory.eINSTANCE.createUniversity();
		Library lib1 = UniversityFactory.eINSTANCE.createLibrary();
		Department dep1 = UniversityFactory.eINSTANCE.createDepartment();
		
		
		res.getContents().add(uni1);
		res.getContents().add(uni2);
		
		res.getContents().add(lib1);
		res.getContents().add(dep1);
		
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	/*
	 * Test if a list of eObjects can be added to the resource
	 */
	@Test
	public void testAddListToResource() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni1 = UniversityFactory.eINSTANCE.createUniversity();
		University uni2 = UniversityFactory.eINSTANCE.createUniversity();
		Library lib1 = UniversityFactory.eINSTANCE.createLibrary();
		Department dep1 = UniversityFactory.eINSTANCE.createDepartment();
		
		List <EObject> list = new ArrayList<EObject>();
		list.add(uni1);
		list.add(uni2);
		list.add(lib1);
		list.add(dep1);
		
		res.getContents().addAll(list);
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	/*
	 * Tests all the different ways of adding items to the resource
	 */
	@Test
	public void testAllAddToResource() throws IOException
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		
		University uni1 = UniversityFactory.eINSTANCE.createUniversity();
		University uni2 = UniversityFactory.eINSTANCE.createUniversity();
		Vehicle v1 = UniversityFactory.eINSTANCE.createVehicle();
		
		res.getContents().add(uni1);
		res.getContents().add(uni2);
		res.getContents().add(v1);
		
		List<EObject> list = new ArrayList<EObject>();
		Library lib1 = UniversityFactory.eINSTANCE.createLibrary();
		Library lib2 = UniversityFactory.eINSTANCE.createLibrary();
		Department d1 = UniversityFactory.eINSTANCE.createDepartment();
		Student s1 = UniversityFactory.eINSTANCE.createStudent();
		
		list.add(lib1);
		list.add(lib2);
		list.add(d1);
		list.add(s1);
		
		res.getContents().addAll(list);
		
		res.save(null);
		
		savedContentsList = getResourceContentsList(res);
		
		Resource loadedRes = loadResource();
		
		loadedContentsList = getResourceContentsList(loadedRes);
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
	
	@Test
	public void testAddManyToResource()
	{
		Resource res = new DeltaResourceImpl(URI.createURI(fileSaveLocation));
		for(int i = 0; i < 10000; i++)
		{
			EObject obj = UniversityFactory.eINSTANCE.createUniversity();
			resource.getContents().add(obj);
			
			obj = UniversityFactory.eINSTANCE.createBook();
			resource.getContents().add(obj);
			
			obj = UniversityFactory.eINSTANCE.createDepartment();
			resource.getContents().add(obj);
		}
		
		List<EObject> list = new ArrayList<EObject>();
		
		for(int i = 0; i <1000; i++)
		{
			EObject obj = UniversityFactory.eINSTANCE.createLibrary();
			list.add(obj);
			
			obj = UniversityFactory.eINSTANCE.createModule();
			list.add(obj);
			
			obj = UniversityFactory.eINSTANCE.createStaffMember();
			list.add(obj);
		}
		
		resource.getContents().addAll(list);
		
		saveAndLoadResource();
		
		assertTrue(EcoreUtil.equals(savedContentsList, loadedContentsList));
	}
}
