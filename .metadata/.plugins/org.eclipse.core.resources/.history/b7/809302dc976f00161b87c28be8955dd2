package evaluation;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import org.apache.log4j.BasicConfigurator;
import org.eclipse.emf.common.util.BasicMonitor;
//import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMLResourceImpl;
import org.eclipse.emf.compare.Comparison;
import org.eclipse.emf.compare.Diff;
import org.eclipse.emf.compare.EMFCompare;
import org.eclipse.emf.compare.merge.BatchMerger;
import org.eclipse.emf.compare.merge.IBatchMerger;
import org.eclipse.emf.compare.merge.IMerger;
import org.eclipse.emf.compare.scope.DefaultComparisonScope;
import org.eclipse.emf.compare.scope.IComparisonScope;

import university.Book;
import university.Library;
import university.UniversityFactory;

public class XMIChangeDetectionEvaluator 
{
	private static final String XMI_MODEL1_LOCATION =  new File("").getAbsolutePath()+"/evaluation models/model1.xmi";
	private static final String XMI_MODEL2_LOCATION =  new File("").getAbsolutePath()+"/evaluation models/model2.xmi";
	
	public static void main(String[] args) throws Exception
	{
		BasicConfigurator.configure(); 
		
		XMIChangeDetectionEvaluator eval = new XMIChangeDetectionEvaluator();
		
		eval.generateXMIModel1();
		eval.generateXMIModel2();
		eval.compare(URI.createFileURI(XMI_MODEL1_LOCATION), URI.createFileURI(XMI_MODEL2_LOCATION));
	}
	
	private void generateXMIModel1() throws Exception
	{
		Resource res = new XMLResourceImpl();
		
		Library library = UniversityFactory.eINSTANCE.createLibrary();
		res.getContents().add(library);
		
		library.setName("York Library");
		
		res.save(new FileOutputStream(new File(XMI_MODEL1_LOCATION)),null);
	}
	
	private void generateXMIModel2() throws Exception
	{
		Resource res = new XMLResourceImpl();
		
		Library library = UniversityFactory.eINSTANCE.createLibrary();
		res.getContents().add(library);
		
		library.setName("York Library");
		library.setName("Leeds University Library");
		
		res.save(new FileOutputStream(new File(XMI_MODEL2_LOCATION)),null);
	}
	
	private void compare(URI uri1, URI uri2)
	{
		Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put
			("xmi", new XMIResourceFactoryImpl());
		
		ResourceSet resourceSet1 = new ResourceSetImpl();
		ResourceSet resourceSet2 = new ResourceSetImpl();

		resourceSet1.getResource(uri1, true);
		resourceSet2.getResource(uri2, true);
		
		IComparisonScope scope = new DefaultComparisonScope(resourceSet1, resourceSet2,null);
		Comparison comparison = EMFCompare.builder().build().compare(scope);
		List<Diff> differences = comparison.getDifferences();
		
		for(Diff d : differences)
		{
			System.out.println(d);
		}
	}
	
	
	
	
}
