package generated_emf_tests;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
import org.junit.*;

import impl.CBPBinaryResourceImpl;
import impl.CBPTextResourceImpl;
import university.UniversityPackage;

public abstract class TestBase 
{
	protected static String fileSaveLocation = null;
	protected final EPackage ePackage = UniversityPackage.eINSTANCE;
	private static boolean testingBinary = false;
	protected Resource res = null;
	private static String ext = null;
	
	@Before
	public void runOnceBeforeTest()
	{
		if(testingBinary)
		{
			fileSaveLocation ="university.cbpb";
			
			res = new CBPBinaryResourceImpl(URI.createURI
					(fileSaveLocation),UniversityPackage.eINSTANCE);
		}
		else
		{
			 fileSaveLocation ="university.cbpt";
			 
			 res = new CBPTextResourceImpl(URI.createURI
					 	(fileSaveLocation),UniversityPackage.eINSTANCE);
		}
		
		/*Delete save file if it exists*/
		File file = new File(fileSaveLocation);
		try {
			Files.deleteIfExists(file.toPath());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@BeforeClass()
	public static void runBeforeClass()
	{
		if(testingBinary)
			ext = "cbpb";
		else
			ext = "cbpt";
	}
	
	@After
	public void runOnceAfterTest()
	{
		res = null;
	}
	
	protected Resource loadResource()
	{
		//Load persisted model into resource contents
		ResourceSetImpl rs = new ResourceSetImpl();
		rs.getResourceFactoryRegistry().getExtensionToFactoryMap().put
		(ext, new Resource.Factory()
		{
			@Override
			public Resource createResource(URI uri)
			{
				if(testingBinary)
					return new CBPBinaryResourceImpl(uri,ePackage);
				else
					return new CBPTextResourceImpl(uri,ePackage);
			}
		});
		
		rs.getPackageRegistry().put(ePackage.getNsURI(),ePackage);
		
		Resource res = rs.createResource(URI.createFileURI(fileSaveLocation));
		try {
			res.load(null);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return res;
	}
	
	protected List<EObject> getResourceContentsList(Resource res)
	{
		List<EObject> outputList = new ArrayList<EObject>();
		for(TreeIterator<EObject> it = res.getAllContents(); it.hasNext();)
		{	
			outputList.add(it.next());
		}
		return outputList;
	}
	
	protected void verify(List<EObject> savedList, List<EObject>loadedList)
	{
		/* Verify that saved and serialised data are the same*/
		if(EcoreUtil.equals(savedList, loadedList))
		{
			System.out.println("Serialsed data Verified!");
			return;
		}
		else
		{
			System.out.println("verification failed! attempting to find cause of failure...");
		}
		
		/* Check saved list and loaded list contain same number of elements*/
		if(savedList.size() != loadedList.size())
		{
			System.out.println("Error : mismatch between savedList size :"+savedList.size()+" and loadedList size:"+loadedList.size());
			return;
		}
	
		/* Compare attributes and their values */
		for(int i = 0; i < savedList.size(); i++)
		{
			EObject obj1 = savedList.get(i);
			EObject obj2 = loadedList.get(i);
			
			
			/*Comapare attributes*/
			for(EAttribute attr1 : obj1.eClass().getEAllAttributes()) //e vs eall
			{
				for(EAttribute attr2 : obj2.eClass().getEAllAttributes())
				{
					if(attr1 == attr2 && obj1.eIsSet(attr1))
					{
						
						Object value1 = obj1.eGet(attr1);
						Object value2 = obj2.eGet(attr2);
						
						if(value1.hashCode() != value2.hashCode())
						{
							System.out.println(" mismatched attributes :");
							System.out.println(obj1.eClass().getName()+"1 attribute : "+attr1.getName() + " value: "+obj1.eGet(attr1).toString());
							System.out.println(obj2.eClass().getName()+"2 attribute : "+attr2.getName() + " value: "+obj2.eGet(attr2).toString());
							System.exit(0);
						}
					}
				}
			}
			
			/*Compare structural features*/
			
			
			/*for(EStructuralFeature f1 : obj1.eClass().getEAllStructuralFeatures()) //combine two loops into one
			{
				for(EStructuralFeature f2 : obj2.eClass().getEAllStructuralFeatures())
				{
					if(f1==f2 && obj1.eIsSet(f1))
					{
						Object value1 = obj1.eGet(f1);
						Object value2 = obj2.eGet(f2);
						
						boolean null_value = false;
						
						if(value1 == null)
						{
							out("Warning: value of f1: \""+f1.getName()+"\" is null" );
							null_value = true;
						}
						else if(value2 == null)
						{
							out("Warning: value of EObject:\""+obj2.eClass().getName()+"\" feature:\""+f2.getName()+"\" is null");
							null_value = true;
						}
						if(!EcoreUtil.equals(f1, f2))
						{
							out("Error: mismatched structural features:");
							out(obj1.eClass().getName()+"1 reference : "+f1.getName()+" value: "+value1);
							out(obj2.eClass().getName()+"2 reference : "+f2.getName()+" value: "+value2);
							return;
						}
						
					}
				}
			}*/
			
		}
		
		System.out.println("Unable to determine cause of verification failure! Have you implemented the logic ?");
	}
}
